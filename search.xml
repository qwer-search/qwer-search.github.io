<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>考研资料</title>
      <link href="/posts/e3aef8ec.html"/>
      <url>/posts/e3aef8ec.html</url>
      
        <content type="html"><![CDATA[<h1 id="考研资料"><a href="#考研资料" class="headerlink" title="考研资料"></a>考研资料</h1><h2 id="考研电子书"><a href="#考研电子书" class="headerlink" title="考研电子书"></a>考研电子书</h2><p><a href="https://www.aliyundrive.com/s/j4L1mwRwBdJ">23考研电子书（高清无水印）</a></p><p><a href="https://www.aliyundrive.com/s/DJURuLxMYHf">23考研公共课电子书（高清无水印）</a></p><h2 id="历年考研真题及答案"><a href="#历年考研真题及答案" class="headerlink" title="历年考研真题及答案"></a>历年考研真题及答案</h2><p><a href="https://www.aliyundrive.com/s/YwQzZXFtxcD">考研英语真题80~21年 </a></p><p><a href="https://www.aliyundrive.com/s/ZKDfNZyEjoN">考研数学真题87~21年</a></p><p><a href="https://www.aliyundrive.com/s/ZKDfNZyEjoN">考研政治真题94~21年</a></p><p><a href="https://www.aliyundrive.com/s/gZhVRZeZZf9">考研答题卡</a></p><h2 id="考研英语"><a href="#考研英语" class="headerlink" title="考研英语"></a>考研英语</h2><p><a href="https://www.aliyundrive.com/s/4V3STctuKCf">01 - 考研英语</a></p><p> <a href="https://www.aliyundrive.com/s/8o264xXwVcE">01 -1-考研英语-朱伟专项</a></p><p><a href="https://www.aliyundrive.com/s/rVfoJ2NXaA6">01 - 2-考研词汇5500【恋练有词】：朱伟</a></p><p><a href="https://www.aliyundrive.com/s/kbvE1rVoEXj">01 - 3-英语语法速成</a></p><p><a href="https://www.aliyundrive.com/s/h9MnssXi6VJ">01- 4 -新东方英语词根词缀记忆大全</a></p><h2 id="考研数学合集"><a href="#考研数学合集" class="headerlink" title="考研数学合集"></a>考研数学合集</h2><p><a href="https://www.aliyundrive.com/s/tKA6xHAn1mk">02 - 1 - 「2021考研数学张宇全程班」</a></p><p><a href="https://www.aliyundrive.com/s/gc9SvLNUXaQ">02 - 2 - 「21武忠祥」</a></p><p><a href="https://www.aliyundrive.com/s/6dV5MnCV6Bd">02 - 3 - 2022文都数学汤家凤</a></p><p><a href="https://www.aliyundrive.com/s/s3eFww1qZ7Y">02 - 4 - 2022张宇</a></p><p><a href="https://www.aliyundrive.com/s/CfVHXgigYUv">02 - 5 - 数学合集</a></p><p><a href="https://www.aliyundrive.com/s/1uvmhXgXjNo">02 - 6 -22武忠祥</a></p><p><a href="https://www.aliyundrive.com/s/2oYe73HLTbe">02 - 7 -张宇题源强化习题-1000题</a></p><p><a href="https://www.aliyundrive.com/s/NfVfW1cbtW8">02 - 8 -张宇强化阶段</a></p><h2 id="考研政治"><a href="#考研政治" class="headerlink" title="考研政治"></a>考研政治</h2><p><a href="https://www.aliyundrive.com/s/5fzDiumBaFA">03 - 考研政治</a></p><h2 id="考研计算机"><a href="#考研计算机" class="headerlink" title="考研计算机"></a>考研计算机</h2><p><a href="https://www.aliyundrive.com/s/C53kUPer2zY">04 - 考研计算机</a></p><h2 id="考研结构力学"><a href="#考研结构力学" class="headerlink" title="考研结构力学"></a>考研结构力学</h2><p><a href="https://www.aliyundrive.com/s/zNbd5nJhW8x">05 - 考研结构力学</a></p><h2 id="管理类联考"><a href="#管理类联考" class="headerlink" title="管理类联考"></a>管理类联考</h2><p><a href="https://www.aliyundrive.com/s/1M8MnyJomge">06 - 管理类联考</a></p><h2 id="考研公开课历年真题"><a href="#考研公开课历年真题" class="headerlink" title="考研公开课历年真题"></a>考研公开课历年真题</h2><p><a href="https://www.aliyundrive.com/s/5gtTJkjoqYj">07 - 历届考研公开课真题+解析</a></p><h2 id="考研408最新大纲解读"><a href="#考研408最新大纲解读" class="headerlink" title="考研408最新大纲解读"></a>考研408最新大纲解读</h2><p><a href="https://www.aliyundrive.com/s/qfqchCqAkxg">08 - 22考研408最新大纲解读</a></p><h1 id="教招-x2F-教资"><a href="#教招-x2F-教资" class="headerlink" title="教招&#x2F;教资"></a>教招&#x2F;教资</h1><h2 id="2021教师招聘考试课程"><a href="#2021教师招聘考试课程" class="headerlink" title="2021教师招聘考试课程"></a>2021教师招聘考试课程</h2><p><a href="https://www.aliyundrive.com/s/JLdS6r9k6vi"> 2021教师招聘考试课程</a></p><p><a href="https://www.aliyundrive.com/s/3bnGhNAc1XC">教招</a></p><p><a href="https://www.aliyundrive.com/s/y2Wkozd5cfC">教师资格证</a></p><p><a href="https://www.aliyundrive.com/s/mUyuoTJLnfa">初中教资</a></p><h1 id="四六级真题"><a href="#四六级真题" class="headerlink" title="四六级真题"></a>四六级真题</h1><p><a href="https://www.aliyundrive.com/s/aiASUQJZKpV">英语四级历年真题和答案解析</a></p><p><a href="https://www.aliyundrive.com/s/4xjjr2WTfoh">大学词汇（四级+六级）</a></p><p><a href="https://www.aliyundrive.com/s/3uSe5KnAHB4">英语六级1989-2020.12所有真题+详解</a></p><p><a href="https://www.aliyundrive.com/s/nCd2oAfes49">大学英语B统考英语资料</a></p><p><a href="https://pan.baidu.com/s/1jSbwKi3Wm1VSS01mOTIGjA">四级大礼包提取码:2022</a></p><p><a href="https://www.aliyundrive.com/s/UuvfMWkyhTz">刘晓艳四级（含刘晓艳考前救命班）</a></p><p><a href="https://www.aliyundrive.com/s/hNG9F1QV3M3">高数叔</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 考研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>专升本资料</title>
      <link href="/posts/7973e2eb.html"/>
      <url>/posts/7973e2eb.html</url>
      
        <content type="html"><![CDATA[<h1 id="真题模块"><a href="#真题模块" class="headerlink" title="真题模块"></a>真题模块</h1><h2 id="河南转身本历年真题"><a href="#河南转身本历年真题" class="headerlink" title="河南转身本历年真题"></a>河南转身本历年真题</h2><p><a href="https://www.aliyundrive.com/s/6E7wSYNXatQ">河南专生本历年真题</a></p><h1 id="试题模块"><a href="#试题模块" class="headerlink" title="试题模块"></a>试题模块</h1><p><a href="https://www.aliyundrive.com/s/EUUzRfpzunh">刑哥2022年压轴题</a></p><p><a href="https://www.aliyundrive.com/s/B4S5Pey16i6">天一考前冲刺蓝皮英语</a></p><p><a href="https://www.aliyundrive.com/s/9GAabT887JE">精通英语考前冲刺5卷</a></p><p><a href="https://www.aliyundrive.com/s/wJY18PtrW2t">耶鲁模拟考试</a></p><p><a href="https://www.aliyundrive.com/s/YHoVTpN7fJV">好老师模拟考试</a></p><p><a href="https://www.aliyundrive.com/s/sNEeWjDQEkx">河南专升本高数模拟卷</a></p><p><a href="https://www.aliyundrive.com/s/XGKP1rq2PDj">河南专升本最后一卷</a></p><p><a href="https://www.aliyundrive.com/s/MdTrJ2PpUN5">洪亮专升本</a></p><p><a href="https://www.aliyundrive.com/s/JuV6QW6YTsW">教育理论2000题</a></p><p><a href="https://www.aliyundrive.com/s/MzVgunm264r">天一冲刺合集</a></p><p><a href="https://www.aliyundrive.com/s/PNMVMEcnWRr">试卷合集杂乱篇</a></p><p><a href="https://www.aliyundrive.com/s/d8TwdAaxNBm">耶鲁高数英语模拟题</a></p><p><a href="https://www.aliyundrive.com/s/EeCNxkC2FCn">英语改错合集</a></p><p><a href="https://www.aliyundrive.com/s/3K5p7tAs2eW">豫生专升本</a></p><p><a href="https://www.aliyundrive.com/s/cX4ke8o3Tcf">中公高数英语压轴题</a></p><h1 id="视频模块"><a href="#视频模块" class="headerlink" title="视频模块"></a>视频模块</h1><h2 id="英语视频"><a href="#英语视频" class="headerlink" title="英语视频"></a>英语视频</h2><p><a href="https://pan.baidu.com/s/1sLovzjLWHWyXlQvKSu5GKA">英语课程全套</a></p><p><a href="https://pan.baidu.com/s/1s2B_U5nK7-Nr5U39ezrE8Q">英语基础精讲课程</a></p><p><a href="https://pan.baidu.com/s/1y-FgYLyeD00DoMnEuueHKw">英语基础课程</a></p><p><a href="https://pan.baidu.com/s/1bR4l7VnhZDAZhpd8ii5w3Q">吴鑫英语课程</a></p><p><a href="https://pan.baidu.com/s/138DEv3LFB__C-Ww0wTNypQ">语法专项训练</a></p><p><a href="https://pan.baidu.com/s/1aKm3BiEmil8pCMc535_QYw">语法课程</a></p><p><a href="https://pan.baidu.com/s/1iRjNLJp1tu1y8W_oX6355w">语法精讲</a></p><p><a href="https://pan.baidu.com/s/1cDLn2Xxs9SMMjqSFpdNl-A">语法精讲全套</a></p><p><a href="https://pan.baidu.com/s/14WKe3d3sd6btmc4xQNhXaA">语法精讲课程</a></p><p><a href="https://pan.baidu.com/s/1ScL9_RkWFRoe2cDf8vIpOg">语法全齐课程全套</a></p><p><a href="https://www.aliyundrive.com/s/AeDVyjQ9veK">无忧英语网课</a></p><h2 id="四六级真题"><a href="#四六级真题" class="headerlink" title="四六级真题"></a>四六级真题</h2><p><a href="https://www.aliyundrive.com/s/aiASUQJZKpV">四级历年真题及答案解析</a></p><p><a href="https://www.aliyundrive.com/s/3uSe5KnAHB4">英语六级1998-2020.12真题+讲解</a></p><p><a href="https://www.aliyundrive.com/s/4xjjr2WTfoh">大学词汇(四六级)</a></p><p><a href="https://www.aliyundrive.com/s/nCd2oAfes49">B统考</a></p><p><a href="https://pan.baidu.com/s/1jSbwKi3Wm1VSS01mOTIGjA">四级大礼包</a></p><p><a href="https://www.aliyundrive.com/s/UuvfMWkyhTz">刘晓燕四级含考前救命班</a></p><h1 id="高数视频课程"><a href="#高数视频课程" class="headerlink" title="高数视频课程"></a>高数视频课程</h1><p><a href="https://www.aliyundrive.com/s/DrAZv7bx9af">汤家凤高数基础专升本考研通吃</a></p><p><a href="https://www.aliyundrive.com/s/sgRiZpjfH5r">宋浩专升本高数96集</a></p><p><a href="https://www.bilibili.com/video/BV1AK411j7Fa?spm_id_from=333.999.0.0">刑哥专升本上册</a></p><p><a href="https://www.aliyundrive.com/s/CTFWGp32LQf">刑哥专升本中册一部分</a></p><p><a href="https://www.aliyundrive.com/s/pKXEXc256BC">刑哥专升本下册</a></p><p><a href="https://www.aliyundrive.com/s/HtanTWJQLbt">天一2020付费视频</a></p><p><strong>以下为付费课程，请私聊博客主</strong></p><ul><li><p>刑哥强化课程</p></li><li><p>3 H掌握微分方程的应用</p></li><li><p>刑哥证明题</p></li><li><p>刑哥2001~2021年真题讲解</p></li></ul><h1 id="语文视频课程"><a href="#语文视频课程" class="headerlink" title="语文视频课程"></a>语文视频课程</h1><p><a href="https://pan.baidu.com/s/1BBiDWCWl9FdWT4jEXdIV7A">大学语文1</a></p><p><a href="https://www.aliyundrive.com/s/7q2pU8rkfYx">大学语文2</a></p><h1 id="管理视频课程"><a href="#管理视频课程" class="headerlink" title="管理视频课程"></a>管理视频课程</h1><p><a href="https://pan.baidu.com/s/1gc4gyRXwnWKNLSlRXFit2A">管理学1</a></p><h1 id="教育心理学课程"><a href="#教育心理学课程" class="headerlink" title="教育心理学课程"></a>教育心理学课程</h1><p><a href="https://pan.baidu.com/s/1iBLJYok2CEp__ka2Z1vF7w">教育心理学1完结</a></p><p><a href="https://pan.baidu.com/s/1sqCf9-ZCpofrh2121E86pA">教育心理学2完结</a></p><h1 id="生理病理学课程"><a href="#生理病理学课程" class="headerlink" title="生理病理学课程"></a>生理病理学课程</h1><p><a href="https://pan.baidu.com/s/1Hc7BCkZywHdHcP9yICypkA">生理病理课程完结</a></p><h1 id="经济学课程"><a href="#经济学课程" class="headerlink" title="经济学课程"></a>经济学课程</h1><p><a href="https://pan.baidu.com/s/1Hc7BCkZywHdHcP9yICypkA">经济学全程班课程</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 专升本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象篇</title>
      <link href="/posts/c98b328b.html"/>
      <url>/posts/c98b328b.html</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象编程介绍"><a href="#面向对象编程介绍" class="headerlink" title="面向对象编程介绍"></a>面向对象编程介绍</h1><h2 id="两大编程思想"><a href="#两大编程思想" class="headerlink" title="两大编程思想"></a>两大编程思想</h2><ul><li>面向过程</li><li>面向对象</li></ul><h2 id="面向过程编程"><a href="#面向过程编程" class="headerlink" title="面向过程编程"></a>面向过程编程</h2><p><strong>面向过程</strong>就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候再一个一个的依 次调用就可以了。</p><p><strong>举个例子：将大象装进冰箱，面向过程做法。</strong></p><p><img src="https://i.bmp.ovh/imgs/2022/08/30/86523144b75eaf22.png"></p><p><strong>面向过程，就是按照我们分析好了的步骤，按照步骤解决问题。</strong></p><h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><p>在面向对象程序开发思想中，每一个对象都是功能中心，具有明确分工。</p><p> 面向对象编程具有灵活、代码可复用、容易维护和开发的优点，更适合多人合作的大型软件项目。</p><p>面向对象的特性：</p><ul><li>封装性</li><li>继承性</li><li>多态性</li></ul><h2 id="面向过程和面向对象的对比"><a href="#面向过程和面向对象的对比" class="headerlink" title="面向过程和面向对象的对比"></a>面向过程和面向对象的对比</h2><p><strong>面向过程</strong></p><ul><li><strong>优点：</strong>性能比面向对象高，适合跟硬件联系很紧密 的东西，例如单片机就采用的面向过程编程。</li><li><strong>缺点：</strong>没有面向对象易维护、易复用、易扩展</li></ul><p><strong>面向对象</strong></p><ul><li><strong>优点：</strong>易维护、易复用、易扩展，由于面向对象有 封装、继承、多态性的特性，可以设计出低耦合的 系统，使系统 更加灵活、更加易于维护</li><li><strong>缺点：</strong>性能比面向过程低</li></ul><h1 id="ES6-中的类和对象"><a href="#ES6-中的类和对象" class="headerlink" title="ES6 中的类和对象"></a>ES6 中的类和对象</h1><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>面向对象更贴近我们的实际生活, 可以使用面向对象描述现实世界事物. 但是事物分为具体的事物和抽象的事物</p><p>手机 是抽象的（泛指的），小米手机是具体的（特指的）</p><p><strong>面向对象的思维特点:</strong> </p><ol><li>抽取（抽象）对象共用的属性和行为组织(封装)成一个类(模板</li><li>对类进行实例化, 获取类的对</li></ol><p>面向对象编程我们考虑的是有哪些对象，按照面向对象的思维特点,不断的创建对象,使用对象,指挥对象做事情</p><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>现实生活中：万物皆对象，对象是<strong>一个具体的事物</strong>，看得见摸得着的实物。例如，一本书、一辆汽车、一个人 可以是“对象”，一个数据库、一张网页、一个与远程服务器的连接也可以是“对象”。</p><p>在 <strong>JavaScript 中，对象是一组无序的相关属性和方法的集合，所有的事物都是对象</strong>，例如字符串、数值、数组、 函数等</p><p>对象是由<strong>属性</strong>和<strong>方法</strong>组成的：</p><ul><li>对象是由属性和方法组成的：</li><li>方法：事物的行为，在对象中用方法来表示（常用动词）</li></ul><h2 id="类-class"><a href="#类-class" class="headerlink" title="类 class"></a>类 class</h2><p>在 ES6 中新增加了类的概念，可以使用 class 关键字声明一个类，之后以这个类来实例化对象。</p><p><strong>类</strong>抽象了对象的公共部分，它泛指某一大类（class）</p><p><strong>对象</strong>特指某一个，通过类实例化一个具体的对象</p><p>面向对象的思维特点:</p><ol><li>抽取（抽象）对象共用的属性和行为组织(封装)成一个<strong>类</strong>(模板</li><li>对类进行实例化, 获取类的<strong>对象</strong></li></ol><h2 id="创建类"><a href="#创建类" class="headerlink" title="创建类"></a>创建类</h2><p><strong>语法：</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">name</span> &#123;</span><br><span class="line"><span class="comment">// class body</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>创建实例</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xx = <span class="keyword">new</span> <span class="title function_">name</span>();</span><br></pre></td></tr></table></figure><p><strong>注意： 类必须使用 new 实例化对象</strong></p><h2 id="类-constructor-构造函数"><a href="#类-constructor-构造函数" class="headerlink" title="类 constructor 构造函数"></a>类 constructor 构造函数</h2><p><strong>constructor()</strong> 方法是类的构造函数(默认方法)，<strong>用于传递参数,返回实例对象</strong>，通过 new 命令生成对象实例时 ，自动调用该方法。如果没有显示定义, 类内部会自动给我们创建一个<strong>constructor()</strong></p><p><strong>语法：</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">           <span class="title function_">constructor</span>(<span class="params">uname</span>)&#123;<span class="comment">//constructor创建方法或者构造函数</span></span><br><span class="line">               <span class="variable language_">this</span>.<span class="property">uname</span>=uname;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>创建实例</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建实例</span></span><br><span class="line">        <span class="keyword">var</span> ls = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;李四&#x27;</span>)</span><br><span class="line">            <span class="keyword">var</span> zs = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(ls);</span><br><span class="line"><span class="comment">//注意使用new实例化对象</span></span><br></pre></td></tr></table></figure><p> <strong>类添加方法</strong></p><p><strong>语法</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">           <span class="title function_">constructor</span>(<span class="params">uname,age</span>)&#123;</span><br><span class="line">               <span class="variable language_">this</span>.<span class="property">uname</span>=uname;</span><br><span class="line">               <span class="variable language_">this</span>.<span class="property">age</span>=age;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="title function_">sing</span>(<span class="params">song</span>)&#123;</span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">uname</span>+song)</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p><strong>创建实例</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ls = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;李四&#x27;</span>,<span class="number">18</span>)</span><br><span class="line">      <span class="keyword">var</span> zs = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;张三&#x27;</span>,<span class="number">18</span>)</span><br><span class="line">      ls.<span class="title function_">sing</span>(<span class="string">&#x27;你还好吗&#x27;</span>)</span><br><span class="line">zs.<span class="title function_">sing</span>(<span class="string">&#x27;大家都很好&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>注意： 方法之间不能加逗号分隔，同时方法不需要添加 function 关键字</strong></p><h1 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h1><h1 id="extends关键字"><a href="#extends关键字" class="headerlink" title="extends关键字"></a>extends关键字</h1><p>现实中的继承：子承父业，比如我们都继承了父亲的姓。</p><p>程序中的继承：子类可以继承父类的一些属性和方法。</p><p><strong>语法：</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>&#123; <span class="comment">// 父类</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Father</span> &#123; <span class="comment">// 子类继承父类</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">surname</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">surname</span>= surname;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">say</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你的姓是&#x27;</span> + <span class="variable language_">this</span>.<span class="property">surname</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Father</span>&#123; <span class="comment">// 这样子类就继承了父类的属性和方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> damao= <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&#x27;刘&#x27;</span>);</span><br><span class="line">damao.<span class="title function_">say</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="super-关键字"><a href="#super-关键字" class="headerlink" title="super 关键字"></a>super 关键字</h2><p><strong>super 关键字</strong>用于访问和调用对象父类上的函数。<strong>可以调用父类的构造函数</strong>，也可以调用父类的普通函数</p><p><strong>语法</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123; <span class="comment">// 父类</span></span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">surname</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">surname</span> = surname;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123; <span class="comment">// 子类继承父类</span></span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">surname,firstname</span>)&#123;</span><br><span class="line"><span class="variable language_">super</span>(surname); <span class="comment">// 调用父类的constructor(surname)</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">firstname</span> = firstname; <span class="comment">// 定义子类独有的属性</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意: 子类在构造函数中使用super, 必须放到 this 前面 (必须先调用父类的构造方法,在使用子类构造方法</strong></p><p><strong>案例1</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">surname</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">surname</span> = surname;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">saySurname</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我的姓是&#x27;</span> + <span class="variable language_">this</span>.<span class="property">surname</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Father</span> &#123; <span class="comment">// 这样子类就继承了父类的属性和方法</span></span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">surname, fristname</span>) &#123;</span><br><span class="line"><span class="variable language_">super</span>(surname); <span class="comment">// 调用父类的constructor(surname)</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">fristname</span> = fristname;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sayFristname</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我的名字是：&quot;</span> + <span class="variable language_">this</span>.<span class="property">fristname</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> damao = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&#x27;刘&#x27;</span>, <span class="string">&quot;德华&quot;</span>);</span><br><span class="line">damao.<span class="title function_">saySurname</span>();</span><br><span class="line">damao.<span class="title function_">sayFristname</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>案例2</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">           <span class="title function_">constructor</span>(<span class="params">x,y</span>)&#123;</span><br><span class="line">               <span class="variable language_">this</span>.<span class="property">x</span>=x;</span><br><span class="line">               <span class="variable language_">this</span>.<span class="property">y</span>=y;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="title function_">sum</span>(<span class="params"></span>)&#123;</span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span>+<span class="variable language_">this</span>.<span class="property">y</span>);</span><br><span class="line">               </span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Father</span>&#123; <span class="comment">// 这样子类就继承了父类的属性和方法</span></span><br><span class="line">           <span class="title function_">constructor</span>(<span class="params">x,y</span>)&#123;</span><br><span class="line">              <span class="variable language_">super</span>(x,y)<span class="comment">//调用了父类中的构造函数</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">var</span> son = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">       son.<span class="title function_">sum</span>()</span><br></pre></td></tr></table></figure><p><strong>super关键字</strong> 用于访问和调用对象父类上的函数。可以调用父类的构造函数，<strong>也可以调用父类的普通函数</strong>。</p><p><strong>语法：</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line"><span class="title function_">say</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;我是爸爸&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Father</span> &#123; <span class="comment">// 这样子类就继承了父类的属性和方法</span></span><br><span class="line"><span class="title function_">say</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// super.say() super 调用父类的方法</span></span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">super</span>.<span class="title function_">say</span>() + <span class="string">&#x27;的儿子&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> damao = <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(damao.<span class="title function_">say</span>());</span><br><span class="line"><span class="comment">//继承中的属性或者帆方法查找原则：就近原则</span></span><br></pre></td></tr></table></figure><p><strong>子类继承父级的加法方法，同时扩展自己的方法,super必须放在this之前</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">           <span class="title function_">constructor</span> (x, y) &#123;</span><br><span class="line">               <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">               <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="title function_">sum</span>(<span class="params"></span>) &#123;</span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span> + <span class="variable language_">this</span>.<span class="property">y</span>);</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//子类继承父级的加法方法，同时扩展自己的方法</span></span><br><span class="line">       <span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Father</span> &#123;</span><br><span class="line"></span><br><span class="line">           <span class="title function_">constructor</span> (x, y) &#123;</span><br><span class="line">               <span class="variable language_">super</span>(x, y);<span class="comment">//super必须放在this之前</span></span><br><span class="line">               <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">               <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">           <span class="title function_">subtract</span>(<span class="params"></span>) &#123;</span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span> - <span class="variable language_">this</span>.<span class="property">y</span>);</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">var</span> son = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line">       son.<span class="title function_">sum</span>()</span><br><span class="line">       son.<span class="title function_">subtract</span>()</span><br></pre></td></tr></table></figure><h2 id="三个注意点"><a href="#三个注意点" class="headerlink" title="三个注意点:"></a>三个注意点:</h2><ol><li>在 ES6 中类没有变量提升，所以必须先定义类，才能通过类实例化对象</li><li>类里面的共有属性和方法一定要加this使用.</li><li>类里面的this指向问题. </li><li>constructor 里面的this指向实例对象, 方法里面的this 指向这个方法的调用者</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内置对象篇</title>
      <link href="/posts/533254b9.html"/>
      <url>/posts/533254b9.html</url>
      
        <content type="html"><![CDATA[<h1 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h1><ul><li>JavaScript 中的对象分为3种：自定义对象 、内置对象、 浏览器对</li><li>前面两种对象是JS 基础 内容，属于 ECMAScript； 第三个浏览器对象属于我们JS 独有的， 我们JS API 讲解</li><li>内置对象就是指 JS 语言自带的一些对象，这些对象供开发者使用，并提供了一些常用的或是最基本而必要的功能（属性和方法）</li><li><strong>内置对象</strong>最大的优点就是帮助我们快速开发</li><li>JavaScript 提供了多个内置对象：Math、 Date 、Array、String等</li></ul><h1 id="查文档"><a href="#查文档" class="headerlink" title="查文档"></a>查文档</h1><h2 id="MDN"><a href="#MDN" class="headerlink" title="MDN"></a>MDN</h2><p>学习一个内置对象的使用，只要学会其常用成员的使用即可，我们可以通过查文档学习，可以通过MDN&#x2F;W3C 来查询。</p><p> Mozilla 开发者网络（MDN）提供了有关开放网络技术（Open Web）的信息，包括 HTML、CSS 和万维网及 HTML5 应用的 API。</p><p> MDN: <a href="https://developer.mozilla.org/zh-CN">https://developer.mozilla.org/zh-CN</a></p><h2 id="如何学习对象中的方法"><a href="#如何学习对象中的方法" class="headerlink" title="如何学习对象中的方法"></a>如何学习对象中的方法</h2><ol><li>查阅该方法的功能</li><li>查阅该方法的功能</li><li>查阅该方法的功能</li><li>通过 demo 进行测试</li></ol><h1 id="Math-对象"><a href="#Math-对象" class="headerlink" title="Math 对象"></a>Math 对象</h1><h2 id="Math-概述"><a href="#Math-概述" class="headerlink" title="Math 概述"></a>Math 概述</h2><p>Math 对象不是构造函数，它具有数学常数和函数的属性和方法。跟数学相关的运算（求绝对值，取整、最大值 等）可以使用 Math 中的成员。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="property">PI</span> <span class="comment">// 圆周率</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>() <span class="comment">// 向下取整</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">ceil</span>() <span class="comment">// 向上取整</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">round</span>() <span class="comment">// 四舍五入版 就近取整 注意 -3.5 结果是 -3 </span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">abs</span>() <span class="comment">// 绝对值</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">max</span>()/<span class="title class_">Math</span>.<span class="title function_">min</span>() <span class="comment">// 求最大和最小值</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">PI</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">1</span>, <span class="number">3</span>, <span class="number">83</span>, <span class="number">2</span>, <span class="number">8</span>));<span class="comment">//83</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(-<span class="number">1</span>, -<span class="number">10</span>));<span class="comment">//-1</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>());<span class="comment">//-Infinity</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="number">42</span>, <span class="number">24</span>, <span class="number">13</span>, <span class="number">435</span>, <span class="number">2</span>));<span class="comment">//2</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//案例：封装自己的数学对象</span></span><br><span class="line"><span class="comment">//利用对象封装自己的数学对象 里面有 PI 最大值和最小</span></span><br><span class="line"><span class="keyword">var</span> myMath=&#123;</span><br><span class="line">            <span class="attr">PI</span>: <span class="number">3.141592653589793</span>,</span><br><span class="line">            <span class="attr">max</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> max=<span class="variable language_">arguments</span>[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;<span class="variable language_">arguments</span>.<span class="property">length</span>;i++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="variable language_">arguments</span>[i]&gt;max)&#123;</span><br><span class="line">                        max=<span class="variable language_">arguments</span>[i];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> max;</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">             <span class="attr">min</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> min = <span class="variable language_">arguments</span>[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="variable language_">arguments</span>[i] &lt; min) &#123;</span><br><span class="line">                        max = <span class="variable language_">arguments</span>[i];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> min;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(myMath.<span class="property">PI</span>)</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(myMath.<span class="title function_">max</span>(<span class="number">1</span>,<span class="number">31</span>,<span class="number">14</span>,<span class="number">343</span>,<span class="number">3242</span>))</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(myMath.<span class="title function_">min</span>(<span class="number">1</span>, <span class="number">31</span>, <span class="number">14</span>, <span class="number">343</span>, <span class="number">3242</span>))</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 绝对值</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(<span class="number">1</span>))<span class="comment">//1</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(-<span class="number">1</span>))<span class="comment">//1</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(<span class="string">&#x27;-1&#x27;</span>))<span class="comment">//隐士转换 会把字符串型 -1 转换成数字类型</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(<span class="string">&#x27;haha&#x27;</span>))<span class="comment">//NAN</span></span><br><span class="line">  <span class="comment">// 三个取整方法</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//(1)Math.floor()向下取整，向最小值取值</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">2.1</span>));<span class="comment">//2</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">2.9</span>))<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//(2)Math.seil() seil()天花板，向上取整，向最大取值</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">seil</span>(<span class="number">2.1</span>))<span class="comment">//3</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">seil</span>(<span class="number">2.9</span>))<span class="comment">//3</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//(3)Math.round()四舍五入,其他数字都是四舍五入，但是 .5 特殊 它往大值去</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">2.1</span>))<span class="comment">//2</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">2.5</span>))<span class="comment">//3</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">2.9</span>))<span class="comment">//3</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(-<span class="number">2.1</span>))<span class="comment">//-2</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(-<span class="number">2.5</span>))<span class="comment">//-2</span></span><br></pre></td></tr></table></figure><h2 id="随机数方法-random"><a href="#随机数方法-random" class="headerlink" title="随机数方法 random()"></a>随机数方法 random()</h2><p>random() 方法可以随机返回一个小数，其取值范围是 [0，1)，左闭右开 0 &lt;&#x3D; x &lt; 1 </p><p>得到一个两数之间的随机整数，包括两个数在内</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//随机数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getRandom</span>(<span class="params">min, max</span>) &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (max - min + <span class="number">1</span>)) + min; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getRandom</span>(<span class="number">1</span>, <span class="number">10</span>)<span class="comment">//1~10,随机数</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//随机点名</span></span><br><span class="line"> <span class="keyword">var</span> arr = [<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;王二&#x27;</span>, <span class="string">&#x27;麻子&#x27;</span>];</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="title function_">getRondom</span>(<span class="number">0</span>, <span class="number">3</span>)]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">getRondom</span>(<span class="params">min, max</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (max - min + <span class="number">1</span>)) + min;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getRondom</span>(<span class="number">0</span>, arr.<span class="property">length</span>-<span class="number">1</span>));</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//猜数字游戏</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getRondom</span>(<span class="params">min, max</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (max - min + <span class="number">1</span>)) + min;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> random = <span class="title function_">getRondom</span>(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> num=<span class="title function_">prompt</span>(<span class="string">&#x27;你来猜，输入1~10之间的数字&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span>(num&gt; random)&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&#x27;你猜大了&#x27;</span>)</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(num&lt;random)&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&#x27;你猜小了&#x27;</span>)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&#x27;你猜对了&#x27;</span>)</span><br><span class="line">                <span class="keyword">break</span>;<span class="comment">//退出整个循环，结束程序</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h1 id="Data日期对象的使用"><a href="#Data日期对象的使用" class="headerlink" title="Data日期对象的使用"></a>Data日期对象的使用</h1><h2 id="获取当前时间必须实例化"><a href="#获取当前时间必须实例化" class="headerlink" title="获取当前时间必须实例化"></a>获取当前时间必须实例化</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> date=<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(date);</span><br></pre></td></tr></table></figure><h2 id="Date-构造函数的参数"><a href="#Date-构造函数的参数" class="headerlink" title="Date() 构造函数的参数"></a>Date() 构造函数的参数</h2><p>如果括号里面有时间，就返回参数里面的时间。例如日期格式字符串为‘2022-10-1’，可以写成new Date(‘2022-10-1’) 或 者 new Date(‘2019&#x2F;10&#x2F;1’）</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> date1 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2022</span>,<span class="number">10</span>,<span class="number">1</span>);</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(date1);<span class="comment">//返回的是11月不是10月</span></span><br><span class="line">       <span class="keyword">var</span> date2=<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2022-10-1 23:59:59&#x27;</span>)</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(date2);</span><br><span class="line">       </span><br></pre></td></tr></table></figure><h2 id="日期格式化"><a href="#日期格式化" class="headerlink" title="日期格式化"></a>日期格式化</h2><p>我们想要 2022-8-8 8:8:8 格式的日期，要怎么办？</p><p>需要获取日期指定的部分，所以我们要手动的得到这种格式。</p><table><thead><tr><th>方法名</th><th>说明</th><th>代码</th></tr></thead><tbody><tr><td>getFullYear()</td><td>获取当年年份</td><td>Obj.getFullYear()</td></tr><tr><td>getMonth()</td><td>获取当月（0~11）</td><td>Obj.getMonth()</td></tr><tr><td>getDate()</td><td>获取当天日期</td><td>Obj.getDate()</td></tr><tr><td>getDay()</td><td>获取星期几(周日0到周六6)</td><td>Obj.getDay()</td></tr><tr><td>getHours()</td><td>获取当前小时</td><td>Obj.getHours()</td></tr><tr><td>getMinutes()</td><td>获取当前分钟</td><td>Obj.getMinutes()</td></tr><tr><td>getSeconds()</td><td>获取当前秒数</td><td>Obj.getSeconds()</td></tr></tbody></table><p><strong>案例： 输出当前日期</strong></p><p>请写出这个格式的日期：2019年8月8日 星期</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//格式化日期 年月日</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getFullYear</span>());<span class="comment">//返回当年年份</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getMonth</span>()+<span class="number">1</span>);<span class="comment">//月份 返回的月份小1个月 记得月份+1</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getDate</span>());<span class="comment">//获取当天日期 几号</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getDay</span>());<span class="comment">//周一返回的是1 周六返回的是6 但是周日返回的是0</span></span><br><span class="line">  <span class="comment">//2022年8月30日星期二</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> year = date.<span class="title function_">getFullYear</span>();</span><br><span class="line">  <span class="keyword">var</span> mouth = date.<span class="title function_">getMonth</span>()+<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> dates = date.<span class="title function_">getDate</span>();</span><br><span class="line">  <span class="keyword">var</span> arr=[<span class="string">&#x27;星期日&#x27;</span>, <span class="string">&#x27;星期一&#x27;</span>, <span class="string">&#x27;星期二&#x27;</span>, <span class="string">&#x27;星期三&#x27;</span>, <span class="string">&#x27;星期四&#x27;</span>, <span class="string">&#x27;星期五&#x27;</span>, <span class="string">&#x27;星期六&#x27;</span>,]</span><br><span class="line">  <span class="keyword">var</span> day = date.<span class="title function_">getDay</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;今天是：&#x27;</span>+year+<span class="string">&#x27;年&#x27;</span>+mouth+<span class="string">&#x27;月&#x27;</span>+dates+<span class="string">&#x27;日 &#x27;</span>+arr[day] );</span><br><span class="line">  </span><br></pre></td></tr></table></figure><p><strong>案例： 输出当前时间</strong></p><p>写一个函数，格式化日期对象，成为 HH:mm:ss 的形式 比如 00:00:00</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//封装一个函数返回当前的时分秒 格式 08：08：08</span></span><br><span class="line">       <span class="keyword">function</span> <span class="title function_">gettime</span>(<span class="params"></span>) &#123;</span><br><span class="line">           <span class="keyword">var</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">           <span class="keyword">var</span> h = date.<span class="title function_">getHours</span>();</span><br><span class="line">           h = h &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + h : h;</span><br><span class="line">           <span class="keyword">var</span> m = date.<span class="title function_">getMinutes</span>();</span><br><span class="line">           m = m &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + m : m;</span><br><span class="line">           <span class="keyword">var</span> s = date.<span class="title function_">getSeconds</span>();</span><br><span class="line">           s = s &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + s : s;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">return</span> h + <span class="string">&#x27;:&#x27;</span> + m + <span class="string">&#x27;:&#x27;</span> + s;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">gettime</span>());</span><br></pre></td></tr></table></figure><h2 id="获取日期的总的毫秒形式"><a href="#获取日期的总的毫秒形式" class="headerlink" title="获取日期的总的毫秒形式"></a>获取日期的总的毫秒形式</h2><p>Date 对象是基于1970年1月1日（世界标准时间）起的毫秒数</p>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对象篇</title>
      <link href="/posts/84a199f2.html"/>
      <url>/posts/84a199f2.html</url>
      
        <content type="html"><![CDATA[<h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><h2 id="什么是对象"><a href="#什么是对象" class="headerlink" title="什么是对象"></a>什么是对象</h2><p>现实生活中，万物皆对象，对象就是一个具体的事物，看得见摸得着的实物。例如，一本书，一脸汽车，一个人可以是“对象”，一个数据库，一张网页，一个服务器也可称“对象”。</p><p>在javascript中，对象是一组无序的相关属性和方法的集合，所有的事物都是对象，例如：字符串、数组、数值、函数。</p><p>对象是有属性和方法组成。</p><p>属性：事物的特征，在对象中用属性来表示。</p><p>方法：事物的行为，在对象中用方法来表示。</p><h2 id="为什么需要对象"><a href="#为什么需要对象" class="headerlink" title="为什么需要对象"></a>为什么需要对象</h2><p>保存一个值时，可以用<strong>变量</strong>，保存多个值（一组值）时，可以使用<strong>数组</strong>。如果要保存一个人的完整信息呢</p><p>例如，将“张三”的个人信息保存在数组中的方式为</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var arr = [&#x27;张三&#x27;，&#x27;男&#x27;,&#x27;30&#x27;，&#x27;176&#x27;];</span><br></pre></td></tr></table></figure><p>J s中的对象表达结构更清晰，更强大，张三的个人信息在对象中的表达结构如下</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">张三.姓名=&#x27;张三&#x27;;</span><br><span class="line">张三.性别=‘男&#x27;;</span><br><span class="line">张三.年龄= 128;</span><br><span class="line">张三.身高=154 ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">person . name =张三&#x27;;</span><br><span class="line">person . sex =男&#x27;;</span><br><span class="line">person.age = 128;</span><br><span class="line">person. height = 154 ;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="创建对象的三种方式"><a href="#创建对象的三种方式" class="headerlink" title="创建对象的三种方式"></a>创建对象的三种方式</h1><h2 id="利用字面量创建对象"><a href="#利用字面量创建对象" class="headerlink" title="利用字面量创建对象"></a>利用字面量创建对象</h2><p><strong>对象字面量</strong>：花括号{ }里面包含了这个具体事物（对象）的属性与方法。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="comment">//1利用对象字面量创建对象&#123;&#125;</span></span><br><span class="line">   <span class="comment">// var obj=&#123;&#125;;创建了一个空的对象</span></span><br><span class="line">   <span class="keyword">var</span> obj=&#123;</span><br><span class="line">       uname :<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">       <span class="attr">age</span>:<span class="number">30</span>,</span><br><span class="line">       <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">       <span class="attr">say</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会唱歌&#x27;</span>);</span><br><span class="line">           </span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//(1)里面的属性或者方法，我们采用键值对的形式  键：属性名  值：属性值</span></span><br><span class="line">   <span class="comment">//(2)多个属性或者方法中间用逗号隔开</span></span><br><span class="line">   <span class="comment">//(3)方法冒号后面跟的是一个匿名函数</span></span><br><span class="line">   <span class="comment">//2使用对象</span></span><br><span class="line">   <span class="comment">//(1)调用对象的属性 我们采用 对象名.属性名</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="property">log</span> (obj.<span class="property">uname</span>)</span><br><span class="line">   <span class="comment">//(2)调用对象还有一种方法  对象名[&#x27;属性名&#x27;]</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(obj[<span class="string">&#x27;age&#x27;</span>])</span><br><span class="line">   <span class="comment">//(调用对象的方法 say  对象名.方法名()  不要忘记小括号)</span></span><br><span class="line">   obj.<span class="title function_">say</span>()</span><br><span class="line"></span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>变量、属性、函数、方法总结</strong></p><ul><li><p>变量： 单独声明并赋值 ，使用时直接写属性名 ，单独存在</p></li><li><p>属性：  在对象里面的不需要声明的 使用时必须是 对象.属性</p></li><li><p>函数：单独存在 通过 “ 函数名()”的方式  就可以调用</p></li><li><p>方法： 在对象里面的函数称为方法，方法不需要声明，使用“对象.方法名()”的方法可以调用，方法用来描述该对象的行为和功能。</p></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//  变量、属性 ||函数、方法的区别</span></span><br><span class="line">  <span class="comment">//1变量和属性的相同点 它们都是用来储存数据的</span></span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">10</span> ;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> obj = &#123;</span><br><span class="line">      <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">age</span>);</span><br><span class="line">  <span class="comment">//变量 单独声明并赋值 使用时直接写属性名 单独存在</span></span><br><span class="line">  <span class="comment">//属性  在对象里面的不需要声明的 使用时必须是 对象.属性</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//2函数和方法的相同点 都是实现某种功能的 做某件事</span></span><br><span class="line">  <span class="comment">//函数是单独声明的 并且调用的 函数名() 单独存在的</span></span><br><span class="line">  <span class="comment">//方法： 在对象里面 ，调用的时候  对象.方法()</span></span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="利用new-Object创建对象"><a href="#利用new-Object创建对象" class="headerlink" title="利用new Object创建对象"></a>利用new Object创建对象</h2><p>跟我们前面学的 new Array() 原理一致</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="title class_">Obect</span>();</span><br><span class="line">person.<span class="property">name</span> = <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line">person.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line">person.<span class="property">sex</span> = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">person.<span class="property">sayHi</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"> <span class="title function_">alert</span>(<span class="string">&#x27;大家好啊~&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>Object() ：第一个字母大写 </p></li><li><p>new Object() ：需要 new 关键字 </p></li><li><p>使用的格式：对象.属性 &#x3D; 值</p></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>()<span class="comment">//创建了一个空对象</span></span><br><span class="line">        obj.<span class="property">uname</span> = <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line">        obj.<span class="property">age</span> = <span class="string">&#x27;18&#x27;</span>;</span><br><span class="line">        obj.<span class="property">sex</span> = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">        obj.<span class="property">say</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;哈哈哈&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//(1)我们利用 等号=赋值号的方法 添加对象的属性和方法</span></span><br><span class="line">        <span class="comment">//(2)每个属性和方法之间用 分号结束</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">uname</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(obj[<span class="string">&#x27;uname&#x27;</span>])</span><br><span class="line">        obj.<span class="title function_">say</span>();</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="利用构造函数创建对象"><a href="#利用构造函数创建对象" class="headerlink" title="利用构造函数创建对象"></a>利用构造函数创建对象</h2><p><strong>构造函数 ：</strong>是一种特殊的函数，主要用来初始化对象，即为对象成员变量赋初始值，它总与 new 运算符一起 使用。我们可以把对象中一些公共的属性和方法抽取出来，然后封装到这个函数里面。</p><p>在 j s 中，使用构造函数要时要注意以下两点：</p><ul><li><p>构造函数用于创建某一类对象，其<strong>首字母要大写</strong></p></li><li><p>构造函数要<strong>和 new 一起使用</strong>才有意义</p></li></ul><p><strong>注意事项</strong></p><ul><li><p>构造函数命名为<strong>首字母大写</strong></p></li><li><p>函数内的属性和方法前面需要添加 this ，表示当前对象的属性和方</p></li><li><p>构造函数<strong>不需要return</strong> 就可以返回返回值</p></li><li><p>构造对象时，必须使用new来调用构造函数</p></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 利用构造函数创建对象</span></span><br><span class="line"></span><br><span class="line">           <span class="comment">// 构造四大名著的对象，相同属性：书名、姓名、时期、方法：写作</span></span><br><span class="line">           <span class="comment">//构造函数语法格式</span></span><br><span class="line">           <span class="comment">// function 构造函数名()&#123;</span></span><br><span class="line">           <span class="comment">//     this.属性=&#x27;值&#x27;;</span></span><br><span class="line">           <span class="comment">//     this.方法=function()&#123;&#125;</span></span><br><span class="line"></span><br><span class="line">           <span class="comment">// &#125;</span></span><br><span class="line">           <span class="comment">// new 构造函数名();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">           <span class="keyword">function</span> <span class="title function_">Masterp</span>(<span class="params">book, uname, time</span>) &#123;<span class="comment">//公共属性</span></span><br><span class="line">               <span class="variable language_">this</span>.<span class="property">book</span>=book;</span><br><span class="line">               <span class="variable language_">this</span>.<span class="property">uname</span>=uname;</span><br><span class="line">               <span class="variable language_">this</span>.<span class="property">time</span>=time;</span><br><span class="line">               <span class="variable language_">this</span>.<span class="property">write</span>=<span class="keyword">function</span>(<span class="params">introduce</span>)&#123;</span><br><span class="line">                   <span class="variable language_">console</span>.<span class="title function_">log</span>(introduce)</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">       <span class="keyword">var</span> xyj= <span class="keyword">new</span> <span class="title class_">Masterp</span>(<span class="string">&#x27;西游记&#x27;</span>,<span class="string">&#x27;吴承恩&#x27;</span>,<span class="string">&#x27;明代&#x27;</span>)<span class="comment">//调用函数返回一个对象</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(xyj.<span class="property">book</span>)</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(xyj.<span class="property">uname</span>)</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(xyj.<span class="property">time</span>)</span><br><span class="line">        xyj.<span class="title function_">write</span>(<span class="string">&#x27;我是吴承恩&#x27;</span>)</span><br><span class="line">           </span><br><span class="line">       <span class="keyword">var</span> sgyy = <span class="keyword">new</span> <span class="title class_">Masterp</span>(<span class="string">&#x27;三国演义&#x27;</span>, <span class="string">&#x27;罗贯中&#x27;</span>, <span class="string">&#x27;元末明初&#x27;</span>)<span class="comment">//调用函数返回一个对象</span></span><br><span class="line">       </span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(sgyy.<span class="property">book</span>)</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(sgyy.<span class="property">uname</span>)</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(sgyy.<span class="property">time</span>)</span><br><span class="line">            xyj.<span class="title function_">write</span>(<span class="string">&#x27;我是罗贯中&#x27;</span>)</span><br><span class="line">              </span><br></pre></td></tr></table></figure><h2 id="构造函数和对象"><a href="#构造函数和对象" class="headerlink" title="构造函数和对象"></a>构造函数和对象</h2><p> <strong>构造函数</strong>，如 Masterp ()，抽象了对象的公共部分，封装到了函数里面，它泛指某一大类（class） </p><p> <strong>创建对象</strong>，如 new Masterp ()，特指某一个，通过 new 关键字创建对象的过程我们也称为对象实例化</p><h1 id="new关键字"><a href="#new关键字" class="headerlink" title="new关键字"></a>new关键字</h1><h2 id="new-在执行时会做四件事情："><a href="#new-在执行时会做四件事情：" class="headerlink" title="new 在执行时会做四件事情："></a><strong>new 在执行时会做四件事情：</strong></h2><ol><li>在内存中创建一个新的空对象。</li><li>让 this 指向这个新的对象。</li><li>执行构造函数里面的代码，给这个新对象添加属性和方法。</li><li>返回这个新对象（所以构造函数里面不需要return）。</li></ol><h1 id="遍历对象属性"><a href="#遍历对象属性" class="headerlink" title="遍历对象属性"></a>遍历对象属性</h1><h2 id="for…in-语句用于对数组或者对象的属性进行循环操作"><a href="#for…in-语句用于对数组或者对象的属性进行循环操作" class="headerlink" title="for…in 语句用于对数组或者对象的属性进行循环操作"></a><strong>for…in 语句</strong>用于对<strong>数组</strong>或者<strong>对象</strong>的属性进行循环操作</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">function</span> <span class="title function_">Masterp</span>(<span class="params">book, uname, time</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">book</span>=book;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">uname</span>=uname;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">time</span>=time;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">write</span>=<span class="keyword">function</span>(<span class="params">introduce</span>)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(introduce)</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//for...in 里面的变量 我们通常写作k或者key</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span>  sgyy)&#123;</span><br><span class="line">        <span class="comment">//console.log(k)//k 是变量 输出 得到属性名</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(sgyy[k])<span class="comment">//sgyy[k]得到属性值</span></span><br><span class="line"></span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li><strong>对象可以让代码结构更清晰</strong></li><li><strong>对象复杂数据类型object。</strong></li><li><strong>本质：对象就是一组无序的相关属性和方法的集合</strong></li><li><strong>构造函数泛指某一大类，比如苹果，不管是红色苹果还是绿色苹果，都统称为苹果</strong></li><li><strong>对象实例特指一个事物，比如这个苹果、正在给你们讲课的老师等</strong></li><li><strong>for…in 语句用于对对象的属性进行循环操作。</strong></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数篇</title>
      <link href="/posts/bc931c4c.html"/>
      <url>/posts/bc931c4c.html</url>
      
        <content type="html"><![CDATA[<h1 id="函数的概念"><a href="#函数的概念" class="headerlink" title="函数的概念"></a>函数的概念</h1><p>在 JS 里面，可能会定义非常多的相同代码或者功能相似的代码，这些代码可能需要大量重复使用。 虽然 for循环语句也能实现一些简单的重复操作，但是比较具有局限性，此时我们就可以使用 <strong>JS 中的函数。</strong></p><p> <strong>函数：</strong>就是封装了一段<strong>可被重复调用执行的代码块</strong>。通过此代码块可以实现大量代码的重复使用。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getSum</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> sum=<span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=a;i&lt;=b;i++)&#123;</span><br><span class="line">                sum+=i</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(sum);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">getSum</span>(<span class="number">1</span>,<span class="number">100</span>)</span><br><span class="line">        <span class="title function_">getSum</span>(<span class="number">50</span>,<span class="number">100</span>)</span><br></pre></td></tr></table></figure><h1 id="声明的使用"><a href="#声明的使用" class="headerlink" title="声明的使用"></a>声明的使用</h1><p>函数在使用时分为两步：<strong>声明函数</strong>和<strong>调用函数</strong>。</p><h2 id="声明函数"><a href="#声明函数" class="headerlink" title="声明函数"></a>声明函数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明函数</span></span><br><span class="line"><span class="keyword">function</span> 函数名() &#123;</span><br><span class="line"> <span class="comment">//函数体代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>function</strong> 是声明函数的关键字,必须小写</p></li><li><p>由于函数一般是为了实现某个功能才定义的， 所以通常我们将<strong>函数名</strong>命名为<strong>动词</strong>，比如 getSum</p></li></ul><h2 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line">函数名(); <span class="comment">// 通过调用函数名来执行函数体代</span></span><br></pre></td></tr></table></figure><ul><li>调用的时候千万不要忘记添加小括号</li><li>口诀：函数不调用，自己不执行</li></ul><p><strong>注意：声明函数本身并不会执行代码，只有调用函数时才会执行函数体代码</strong></p><h2 id="函数的封装"><a href="#函数的封装" class="headerlink" title="函数的封装"></a>函数的封装</h2><ul><li>函数的封装是把一个或者多个功能通过函数的方式封装起来，对外只提供一个简单的函数接口</li><li>函数的封装是把一个或者多个功能通过函数的方式封装起来，对外只提供一个简单的函数接口</li></ul><h1 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h1><h2 id="形参和实参"><a href="#形参和实参" class="headerlink" title="形参和实参"></a>形参和实参</h2><p>在<strong>声明函数</strong>时，可以在函数名称后面的小括号中添加一些参数，这些参数被称为<strong>形参</strong>，而在<strong>调用该函数</strong>时， 同样也需要传递相应的参数，这些参数被称为<strong>实参</strong>。</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>形参</td><td>形式上的参数，函数定义时传递的参数，当前并不知道是什么</td></tr><tr><td>实参</td><td>实际上的参数，函数调用时传递的参数，实参传递给形参</td></tr></tbody></table><p><strong>参数的作用</strong> : 在<strong>函数内部</strong>某些值不能固定，我们可以通过参数在<strong>调用函数时传递</strong>不同的值进去。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 带参数的函数声明</span></span><br><span class="line"><span class="keyword">function</span> 函数名(形参<span class="number">1</span>, 形参<span class="number">2</span> , 形参<span class="number">3.</span>..) &#123; <span class="comment">// 可以定义任意多的参数，用逗号分隔</span></span><br><span class="line"> <span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 带参数的函数调用</span></span><br><span class="line">函数名(实参<span class="number">1</span>, 实参<span class="number">2</span>, 实参<span class="number">3.</span>..); </span><br></pre></td></tr></table></figure><p><strong>案例</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSum</span>(<span class="params">num1, num2</span>) &#123;<span class="comment">//有参</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(num1 - num2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用函数</span></span><br><span class="line"><span class="title function_">getSum</span>(<span class="number">7</span>, <span class="number">3</span>); <span class="comment">// 4</span></span><br><span class="line"><span class="title function_">getSum</span>(<span class="number">6</span>, <span class="number">5</span>); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">say</span>(<span class="params"></span>)&#123;<span class="comment">//无参</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是谁&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">  <span class="title function_">say</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="函数形参和实参个数不匹配问题"><a href="#函数形参和实参个数不匹配问题" class="headerlink" title="函数形参和实参个数不匹配问题"></a>函数形参和实参个数不匹配问题</h2><table><thead><tr><th><strong>参数个数</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>实参个数&#x3D;形参个数</td><td>输出正确结果</td></tr><tr><td>实参个数&gt;形参个数</td><td>只取形参个数</td></tr><tr><td>实参个数&lt;形参个数</td><td>多的形参定义为undefind,输出结果为NAN</td></tr></tbody></table><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li><p>函数可以带参数也可以不带参数</p></li><li><p>声明函数的时候，函数名括号里面的是形参，形参的默认值为 undefine</p></li><li><p>调用函数的时候，函数名括号里面的是实参</p></li><li><p>多个参数中间用逗号分隔</p></li><li><p>形参的个数可以和实参个数不匹配，但是结果不可预计，我们尽量要匹配</p></li></ul><h1 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h1><h2 id="return-语句"><a href="#return-语句" class="headerlink" title="return 语句"></a>return 语句</h2><p>有的时候，我们会希望函数将值返回给调用者，此时通过使用 return 语句就可以实现。</p><p>return 语句的语法格式如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明函数</span></span><br><span class="line"><span class="keyword">function</span> 函数名（）&#123;</span><br><span class="line"> ...</span><br><span class="line"> <span class="keyword">return</span> 需要返回的值；</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line">函数名(); <span class="comment">// 此时调用函数就可以得到函数体内return 后面的值</span></span><br></pre></td></tr></table></figure><ul><li>在使用 return 语句时，函数会停止执行，并返回指定的值</li><li>如果函数<strong>没有 return</strong> ，返回的值是 <strong>undefined</strong></li></ul><p>有的时候，我们会希望函数将值返回给调用者，此时通过使用 return 语句就能实现。</p><p>例如，声明了一个say()函数，该函数的返回值为666，其代码如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 声明函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">say</span>(<span class="params"></span>)&#123;</span><br><span class="line">            </span><br><span class="line">       <span class="keyword">return</span> <span class="number">666</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line">        <span class="title function_">say</span>()<span class="comment">// 此时 say 的值就等于666，因为 return 语句会把自身后面的值返回给调用者</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">say</span>());<span class="comment">//输出</span></span><br></pre></td></tr></table></figure><h2 id="函数的返回值案例"><a href="#函数的返回值案例" class="headerlink" title="函数的返回值案例"></a>函数的返回值案例</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//案例 1：利用函数求任意两个</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getMax</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line"> <span class="keyword">return</span> num1 &gt; num2 ? num1 : num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getMax</span>(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getMax</span>(<span class="number">11</span>, <span class="number">2</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//案例 2：利用函数求任意一个数组中的最大值</span></span><br><span class="line"><span class="comment">//定义一个获取数组中最大数的函数</span></span><br><span class="line"><span class="comment">//求数组 [5,2,9,10,6,7] 中</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getMaxFromArr</span>(<span class="params">numArray</span>)&#123;</span><br><span class="line"> <span class="keyword">var</span> maxNum = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>;i &lt; numArray.<span class="property">length</span>;i++)&#123;</span><br><span class="line"> <span class="keyword">if</span>(numArray[i] &gt; maxNum)&#123;</span><br><span class="line"> maxNum = numArray[i];</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> maxNum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arrNum = [<span class="number">5</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">7</span>];</span><br><span class="line"><span class="keyword">var</span> maxN = <span class="title function_">getMaxFromArr</span>(arrNum); <span class="comment">// 这个实参是个数组</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;最大值为：&#x27;</span>+ maxN);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="return-终止函数"><a href="#return-终止函数" class="headerlink" title="return 终止函数"></a>return 终止函数</h2><p>return 语句之后的代码不被执行。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">num1，num2</span>)&#123;</span><br><span class="line"> <span class="comment">//函数体</span></span><br><span class="line"> <span class="keyword">return</span> num1 + num2; <span class="comment">// 注意：return 后的代码不执行</span></span><br><span class="line"> <span class="title function_">alert</span>(<span class="string">&#x27;我不会被执行，因为前面有 return&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> resNum = <span class="title function_">add</span>(<span class="number">21</span>,<span class="number">6</span>); <span class="comment">// 调用函数，传入两个实参，并通过 resNum 接收函数返回值</span></span><br><span class="line"><span class="title function_">alert</span>(resNum); <span class="comment">// 27</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="return-的返回值"><a href="#return-的返回值" class="headerlink" title="return 的返回值"></a>return 的返回值</h2><p>return 只能返回一个值。如果用逗号隔开多个值，以最后一个为准</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">num1，num2</span>)&#123;</span><br><span class="line"> <span class="comment">//函数体</span></span><br><span class="line"> <span class="keyword">return</span> num1，num2;<span class="comment">//返回最后一个值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> resNum = <span class="title function_">add</span>(<span class="number">21</span>,<span class="number">6</span>); <span class="comment">// 调用函数，传入两个实参，并通过 resNum 接收函数返回值</span></span><br><span class="line"><span class="title function_">alert</span>(resNum); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><p>创建一个函数，实现两个数之间的加减乘除运算，并将结果返回。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="built_in">parseFloat</span>(<span class="title function_">prompt</span>(<span class="string">&#x27;请输入第一个数&#x27;</span>));</span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">parseFloat</span>(<span class="title function_">prompt</span>(<span class="string">&#x27;请输入第二个数&#x27;</span>));</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">count</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line"> <span class="keyword">var</span> arr = [a + b, a - b, a * b, a / b];</span><br><span class="line"> <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = <span class="title function_">count</span>(a, b);<span class="comment">//返回一个数组</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将数组遍历出来。</span></span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt; result.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(result[i])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="函数没有-return-返回-undefined"><a href="#函数没有-return-返回-undefined" class="headerlink" title="函数没有 return 返回 undefined"></a>函数没有 return 返回 undefined</h2><p>函数都是有返回值的</p><ol><li>如果有return 则返回 return 后面的值</li><li>如果没有return 则返回 undefined</li></ol><h1 id="break-、continue-、return-的区别"><a href="#break-、continue-、return-的区别" class="headerlink" title="break 、continue 、return 的区别"></a>break 、continue 、return 的区别</h1><ul><li>break ：结束当前的循环体（如 for、while）</li><li>continue ：跳出本次循环，继续执行下次循环（如 for、while</li><li>return ：不仅可以退出循环，还能够返回 return 语句中的值，同时还可以结束当前的函数体内的代码</li></ul><h1 id="arguments的使用"><a href="#arguments的使用" class="headerlink" title="arguments的使用"></a>arguments的使用</h1><p>当我们不确定有多少个参数传递的时候，可以用 <strong>arguments</strong> 来获取。在 JavaScript 中，arguments 实际上 它是当前函数的一个<strong>内置对象</strong>。所有函数都内置了一个 arguments 对象，arguments 对象中<strong>存储了传递的 所有实参</strong></p><p><strong>arguments</strong>展示形式是一个伪数组，因此可以进行遍历。伪数组具有以下特点：</p><ul><li>具有 length 属性</li><li>按索引方式储存数据</li><li>不具有数组的 push , pop 等方法</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">count</span>(<span class="params"></span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="variable language_">arguments</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">var</span> a=  <span class="title function_">count</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>)</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(a);<span class="comment">//数字存储在arguments中</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">length</span>);<span class="comment">//arguments有长度</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(a[<span class="number">1</span>]); <span class="comment">//arguments中的数字是按照索引排的</span></span><br></pre></td></tr></table></figure><p><img src="https://i.bmp.ovh/imgs/2022/08/27/4e8d21e64f5945ba.png"></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">count</span>(<span class="params"></span>)&#123;</span><br><span class="line">           <span class="keyword">var</span> max =<span class="variable language_">arguments</span>[<span class="number">0</span>];</span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="variable language_">arguments</span>.<span class="property">length</span>;i++)&#123;</span><br><span class="line">               <span class="keyword">if</span> (<span class="variable language_">arguments</span>[i]&gt;max)&#123;</span><br><span class="line">                  max=<span class="variable language_">arguments</span>[i]</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           </span><br><span class="line"></span><br><span class="line">           <span class="keyword">return</span> max</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">var</span> a=  <span class="title function_">count</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>)</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">       </span><br></pre></td></tr></table></figure><h1 id="函数案例"><a href="#函数案例" class="headerlink" title="函数案例"></a>函数案例</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">案例 <span class="number">1</span>： 利用函数封装方式，翻转任意一个</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reverse</span>(<span class="params">arr</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = arr.<span class="property">length</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">newArr[newArr.<span class="property">length</span>] = arr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr1 = <span class="title function_">reverse</span>([<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">9</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">案例 <span class="number">2</span>： 利用函数封装方式，对数组排序 -- 冒泡排序</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.<span class="property">length</span> - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line"><span class="keyword">var</span> temp = arr[j];</span><br><span class="line">arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//案例 3： 判断闰</span></span><br><span class="line"><span class="comment">//要求：输入一个年份，判断是否是闰年（闰年：能被4整除并且不能被100整数，或者能被400整除)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isRun</span>(<span class="params">year</span>) &#123;</span><br><span class="line"> <span class="keyword">var</span> flag = <span class="literal">false</span>;</span><br><span class="line"> <span class="keyword">if</span> (year % <span class="number">4</span> === <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> !== <span class="number">0</span> || year % <span class="number">400</span> === <span class="number">0</span>) &#123;</span><br><span class="line"> flag = <span class="literal">true</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isRun</span>(<span class="number">2010</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isRun</span>(<span class="number">2012</span>));</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数可以调用另外一个函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>);</span><br><span class="line"> <span class="title function_">fn2</span>();</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fn1&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>);</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fn2&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn1</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//案例 4： 用户输入年份，输出当前年份2</span></span><br><span class="line"><span class="comment">//如果是闰年，则2月份是 29天， 如果是平年，则2月份是 28天</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">backDay</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> year = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入年份：&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_">isRun</span>(year)) &#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&#x27;当年年份是闰年，2月份有29天&#x27;</span>)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&#x27;当年年份是闰年，2月份有28天&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">backDay</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">isRun</span>(<span class="params">year</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (year % <span class="number">4</span> === <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> !== <span class="number">0</span> || year % <span class="number">400</span> === <span class="number">0</span>) &#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> flag;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h1 id="函数的两种声明方式"><a href="#函数的两种声明方式" class="headerlink" title="函数的两种声明方式"></a>函数的两种声明方式</h1><h2 id="自定义函数方式-命名函数"><a href="#自定义函数方式-命名函数" class="headerlink" title="自定义函数方式(命名函数"></a>自定义函数方式(命名函数</h2><p>利用函数关键字 function 自定义函数方式</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明定义方式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;...&#125;</span><br><span class="line"><span class="comment">// 调用 </span></span><br><span class="line"><span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure><ul><li>因为有名字，所以也被称为命名函数</li><li>调用函数的代码既可以放到声明函数的前面，也可以放在声明函数的后面</li></ul><h2 id="函数表达式方式-匿名函数"><a href="#函数表达式方式-匿名函数" class="headerlink" title="函数表达式方式(匿名函数"></a>函数表达式方式(匿名函数</h2><p>利用函数表达式方式的写法如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这是函数表达式写法，匿名函数后面跟分号结束</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">function</span>(<span class="params"></span>)&#123;...&#125;；</span><br><span class="line"><span class="comment">// 调用的方式，函数调用必须写到函数体下面</span></span><br><span class="line"><span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure><ul><li><p>因为函数没有名字，所以也被称为匿名函数</p></li><li><p>这个fn 里面存储的是一个函数</p></li><li><p>函数表达式方式原理跟声明变量方式是一致的</p></li><li><p>函数表达式方式原理跟声明变量方式是一致的</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 函数篇 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>弹性布局</title>
      <link href="/posts/3217b0d8.html"/>
      <url>/posts/3217b0d8.html</url>
      
        <content type="html"><![CDATA[<h2 id="容器样式属性"><a href="#容器样式属性" class="headerlink" title="容器样式属性"></a>容器样式属性</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*开启弹性布局首先在容器样式中写  display: flex;，以下样式才生效*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">flex-direction</span>:;</span><br><span class="line"></span><br><span class="line"><span class="attribute">flex-wrap</span>:;</span><br><span class="line"></span><br><span class="line"><span class="attribute">flex-flow</span>:;</span><br><span class="line"></span><br><span class="line"><span class="attribute">justify-content</span>:;</span><br><span class="line"></span><br><span class="line"><span class="attribute">align-items</span>:;</span><br><span class="line"></span><br><span class="line"><span class="attribute">align-content</span>:;</span><br></pre></td></tr></table></figure><h3 id="容器样式属性的用法"><a href="#容器样式属性的用法" class="headerlink" title="容器样式属性的用法"></a>容器样式属性的用法</h3><h4 id="flex-direction用法"><a href="#flex-direction用法" class="headerlink" title="flex-direction用法"></a><strong>flex-direction用法</strong></h4><p><strong><em>flex-direction是设置主轴方向的，</em>值为：row 行  | column: 列</strong></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 主轴方向默认x轴，y轴为交叉轴 */</span></span><br><span class="line"><span class="attribute">flex-direction</span>:row ;</span><br><span class="line"><span class="comment">/* 主轴方向设置为y轴 ，x轴则为交叉轴*/</span></span><br><span class="line"><span class="attribute">flex-direction</span>: column; </span><br><span class="line"><span class="comment">/*主轴为x轴，项目从右至左排列*/</span></span><br><span class="line"><span class="attribute">flex-direction</span>: row-reverse;</span><br><span class="line"><span class="comment">/*主轴为Y轴，项目从下至上排列*/</span></span><br><span class="line"><span class="attribute">flex-direction</span>: column-reverse;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="flex-wrap用法"><a href="#flex-wrap用法" class="headerlink" title="flex-wrap用法"></a><strong>flex-wrap用法</strong></h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">flex-wrap</span>:nowrap;</span><br><span class="line"><span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line"><span class="attribute">flex-wrap</span>:wrap-reverse;</span><br><span class="line"><span class="comment">/*nowrap为默认值不换行</span></span><br><span class="line"><span class="comment">wrap为换行</span></span><br><span class="line"><span class="comment">wrap-reverse 换行 第一行在最下面 */</span></span><br></pre></td></tr></table></figure><p><strong>justify-content的用法</strong></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">justify-content</span>:flex-start ;</span><br><span class="line">            <span class="comment">/* 默认值，左对齐 */</span></span><br><span class="line"><span class="attribute">justify-content</span>: flex-end;</span><br><span class="line">            <span class="comment">/* 右对齐 */</span></span><br><span class="line"><span class="attribute">justify-content</span>: center;</span><br><span class="line">            <span class="comment">/* 居中 */</span></span><br><span class="line"><span class="attribute">justify-content</span>: space-around;</span><br><span class="line">            <span class="comment">/* 每个项目两侧的间隔相等。项目之间的间隔比项目与边框的间隔大一倍。 */</span></span><br><span class="line"><span class="attribute">justify-content</span>: space-between;</span><br><span class="line">            <span class="comment">/* 两端对齐，项目之间的间距相等 */</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p> <strong>align-items的用法</strong></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">以下五个值，具体的对齐方式与交叉轴的方向有关，</span><br><span class="line">           <span class="attribute">align-items</span>:flex-start;</span><br><span class="line">           <span class="comment">/* 交叉轴起点对其 */</span></span><br><span class="line">           <span class="attribute">align-items</span>: flex-end;</span><br><span class="line">           <span class="comment">/* 交叉轴终点对齐 */</span></span><br><span class="line">           <span class="attribute">align-items</span>: center;</span><br><span class="line">           <span class="comment">/* 交叉轴的中点对齐 */</span></span><br><span class="line">           <span class="attribute">align-items</span>: baseline;</span><br><span class="line">           <span class="comment">/* 项目的第一行基线对齐 */</span></span><br><span class="line">           <span class="attribute">align-items</span>: stretch;</span><br><span class="line">           <span class="comment">/* 项目未设置高度或者设置auto,项目高度将占满容器的高度 */</span></span><br></pre></td></tr></table></figure><p><strong>align-content的用法</strong></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">align-content</span>:flex-end ;</span><br><span class="line">         <span class="comment">/* 与交叉轴的终点对齐 */</span></span><br><span class="line">         <span class="attribute">align-content</span>: flex-start;</span><br><span class="line">           <span class="comment">/* 与交叉轴的起点对齐 */</span></span><br><span class="line">         <span class="attribute">align-content</span>: center;</span><br><span class="line">           <span class="comment">/* 与交叉轴的中点对齐 */</span></span><br><span class="line">         <span class="attribute">align-content</span>: space-around;</span><br><span class="line">          <span class="comment">/* 每根轴线的两侧的间隔都相等。轴线之间的间隔比轴线与边框的间隔大一倍 */</span></span><br><span class="line">         <span class="attribute">align-content</span>: space-between;</span><br><span class="line">         <span class="comment">/* 与交叉轴两端对齐，轴线之间的间隔平均分部。 */</span></span><br><span class="line">         <span class="attribute">align-content</span>: stretch;</span><br><span class="line">         轴线占满整个交叉轴</span><br></pre></td></tr></table></figure><h3>    <center>   <p style='color:red;'>注：justify-content与align-content的区别：justify-content是与主轴方向对齐方式；align-content是交叉轴方向对齐方式</p>         </center></h3><h2 id="项目样式属性"><a href="#项目样式属性" class="headerlink" title="项目样式属性"></a>项目样式属性</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">order</span>: ;</span><br><span class="line"><span class="attribute">flex-grow</span>: ;</span><br><span class="line"><span class="attribute">flex-shrink</span>: ;</span><br><span class="line"><span class="attribute">flex-basis</span>: ;</span><br><span class="line"><span class="attribute">flex</span>: ;</span><br><span class="line"><span class="attribute">align-self</span>: ;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>order的用法</strong></p><p>order属性定义项目的排列顺序，数值越小排序越靠前，默认值为0</p><p>式图重要代码</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>)&#123;</span><br><span class="line">    <span class="attribute">order</span>: -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*原本四号盒子现在排第一位*/</span></span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/vtTGqK"><img src="https://s1.ax1x.com/2022/08/13/vtTGqK.png" alt="vtTGqK.png"></a></p><p><strong>flex-grow的用法</strong></p><p>flex-grow属性定义项目的放大比例，默认为0，即有剩余空间，也不放大。</p><p>如果所有的项目都为1，则它们平分剩余空间。如果有一项值为2，其他均为1，则前者分割的剩余空间比其他多一倍。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">           <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">           <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">           <span class="attribute">background-color</span>: aqua;</span><br><span class="line">           <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span> <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">           <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p><img src="https://s3.bmp.ovh/imgs/2022/08/13/6d33060e561b9517.gif"></p><p><strong>flex-shrink的用法</strong></p><p>flex-shrink属性定义项目的缩小比例，默认为1，即如果剩余空间不足，该项目被缩小。</p><p>如果所有的项目值为1，当空间不足时，都将等比例缩小；如果其中一个项目值为0，其余都为1，当空间不足时，前者不缩小；</p><p>负值对该项目属性无效</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"> <span class="selector-class">.box</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">700px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">            <span class="attribute">display</span>: flex;</span><br><span class="line">            <span class="attribute">background-color</span>: antiquewhite;</span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: aqua;</span><br><span class="line">            <span class="attribute">margin</span>:<span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">            <span class="attribute">flex-shrink</span>: <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/vtjwuj"><img src="https://s1.ax1x.com/2022/08/13/vtjwuj.md.png" alt="vtjwuj.md.png"></a></p><p><strong>flex-basis的用法</strong></p><p>flex-basis属性定义了分配空间之前，该项目占据主轴空间。浏览器根据这个属性判断主轴是否有多余空间。默认值为0，即项目的本来大小。不常用！！！</p><h3 id="flex的用法"><a href="#flex的用法" class="headerlink" title="flex的用法"></a><strong>flex</strong>的用法</h3><p><code>flex</code> 属性用于指定弹性子元素如何分配空间。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">flex</span>: auto | initial | none | inherit |  [ flex-grow ] || [ flex-shrink ] || [ flex-basis ]</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="attribute">flex</span>:<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.box</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line">            <span class="attribute">flex</span>:<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.box</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123; </span><br><span class="line">          <span class="attribute">flex</span>:<span class="number">1</span> ;</span><br><span class="line">          &#125;</span><br><span class="line"><span class="comment">/*第一个占用2/4,其余各占用1/4*/</span></span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/vNiTIJ"><img src="https://s1.ax1x.com/2022/08/13/vNiTIJ.png" alt="vNiTIJ.png"></a></p><p><strong>align-self的用法</strong></p><p>align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性，默认值为auto，表示继承父元素的align-items属性，如没父元素。则等同于stretch.</p><p>该属性有六个值，除了auto,其他值都与align-items的值一样。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">align-self</span>: auto;</span><br><span class="line">       <span class="attribute">align-self</span>: flex-start;</span><br><span class="line">       <span class="attribute">align-self</span>: flex-end;</span><br><span class="line">       <span class="attribute">align-self</span>: center;</span><br><span class="line">       <span class="attribute">align-self</span>: baseline;</span><br><span class="line">       <span class="attribute">align-self</span>: stretch;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line">            </span><br><span class="line">          <span class="attribute">align-self</span>: flex-end;</span><br><span class="line">    <span class="comment">/*将第二个盒子与交叉轴底部对齐*/</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><img src="https://s3.bmp.ovh/imgs/2022/08/13/15b5e4a9a7c51f76.gif"></p>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浮动篇</title>
      <link href="/posts/e549ff57.html"/>
      <url>/posts/e549ff57.html</url>
      
        <content type="html"><![CDATA[<h2 id="在前端开发中，使用float浮动常常让几个快级元素一行排列，不过浮动后会出现高度塌陷问题，以下是解决浮动带来的高度塌陷的问题。建议使用的清除浮动的四种方法。"><a href="#在前端开发中，使用float浮动常常让几个快级元素一行排列，不过浮动后会出现高度塌陷问题，以下是解决浮动带来的高度塌陷的问题。建议使用的清除浮动的四种方法。" class="headerlink" title="在前端开发中，使用float浮动常常让几个快级元素一行排列，不过浮动后会出现高度塌陷问题，以下是解决浮动带来的高度塌陷的问题。建议使用的清除浮动的四种方法。"></a>在前端开发中，使用float浮动常常让几个快级元素一行排列，不过浮动后会出现高度塌陷问题，以下是解决浮动带来的高度塌陷的问题。建议使用的清除浮动的四种方法。</h2><p>如下图所视，子元素使用浮动后，父元素没被撑开。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>盒子1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>盒子2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>盒子3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.box</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">1200px</span>;</span><br><span class="line">            <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.box</span>&gt;<span class="selector-tag">div</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span><br><span class="line">            <span class="attribute">text-align</span>: center;</span><br><span class="line">            <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">float</span>: left;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/vwwCUx"><img src="https://s1.ax1x.com/2022/08/16/vwwCUx.png" alt="vwwCUx.png"></a></p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p><strong>给父级元素添加高度</strong></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">           <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">           <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">           <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="selector-class">.box</span>&#123;</span><br><span class="line">           <span class="attribute">width</span>: <span class="number">1200px</span>;</span><br><span class="line">           <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">           <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="selector-class">.box</span>&gt;<span class="selector-tag">div</span>&#123;</span><br><span class="line">           <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">           <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">           <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span><br><span class="line">           <span class="attribute">text-align</span>: center;</span><br><span class="line">           <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">           <span class="attribute">float</span>: left;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/vw0lwR"><img src="https://s1.ax1x.com/2022/08/16/vw0lwR.png" alt="vw0lwR.png"></a></p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p><strong>给父级元素添加overflow: hidden;或者overflow: auto; ，跟随子元素的高度</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">原理：必须定义width或zoom:1，同时不能定义height，使用overflow:hidden时，浏览器会自动检查浮动区域的高度</span><br><span class="line">优点：简单、代码少、浏览器支持好</span><br><span class="line">缺点：不能和position配合使用，因为超出的尺寸的会被隐藏</span><br><span class="line">建议：只推荐没有使用position或对overflow:hidden理解比较深的朋友使用。</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">           <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">           <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">           <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="selector-class">.box</span>&#123;</span><br><span class="line">           <span class="attribute">width</span>: <span class="number">1200px</span>;</span><br><span class="line">           <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">           <span class="attribute">overflow</span>: hidden;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="selector-class">.box</span>&gt;<span class="selector-tag">div</span>&#123;</span><br><span class="line">           <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">           <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">           <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span><br><span class="line">           <span class="attribute">text-align</span>: center;</span><br><span class="line">           <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">           <span class="attribute">float</span>: left;</span><br><span class="line">           <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h2><p><strong>在需要清除浮动的后面添加一个空盒子，使用 clear: both;清除浮动。不建议使用。</strong></p><p>优点：简单，代码少，浏览器兼容性好。<br>缺点：需要添加大量无语义的 html元素，代码不够优雅，后期不容易维护。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sm&quot;</span>&gt;</span>盒子1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sm&quot;</span>&gt;</span>盒子2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sm&quot;</span>&gt;</span>盒子3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clear&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       </span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">           <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">           <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">           <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="selector-class">.box</span>&#123;</span><br><span class="line">           <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">           <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">        </span><br><span class="line">       &#125;</span><br><span class="line">       <span class="selector-class">.sm</span>&#123;</span><br><span class="line">           <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">           <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">           <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span><br><span class="line">           <span class="attribute">text-align</span>: center;</span><br><span class="line">           <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">           <span class="attribute">float</span>: left;</span><br><span class="line">           <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">       &#125;</span><br><span class="line">      <span class="selector-class">.clear</span>&#123;</span><br><span class="line">       <span class="attribute">clear</span>: both;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/vwrXng"><img src="https://s1.ax1x.com/2022/08/16/vwrXng.png" alt="vwrXng.png"></a></p><h2 id="方法四"><a href="#方法四" class="headerlink" title="方法四"></a>方法四</h2><p><strong>给父级div定义 伪类:after</strong></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">           <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">           <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">           <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="selector-class">.box</span>&#123;</span><br><span class="line">           <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">           <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">        </span><br><span class="line">       &#125;</span><br><span class="line">       <span class="selector-class">.box</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">           <span class="comment">/* 必须写 */</span></span><br><span class="line">           <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">           <span class="attribute">display</span>: block;</span><br><span class="line">           <span class="attribute">clear</span>: both;</span><br><span class="line"></span><br><span class="line">           </span><br><span class="line">           <span class="comment">/* 写不写无所谓 */</span></span><br><span class="line">           <span class="comment">/* visibility: hidden;</span></span><br><span class="line"><span class="comment">           height: 0; */</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="selector-class">.sm</span>&#123;</span><br><span class="line">           <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">           <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">           <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span><br><span class="line">           <span class="attribute">text-align</span>: center;</span><br><span class="line">           <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">           <span class="attribute">float</span>: left;</span><br><span class="line">           <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">       &#125;</span><br><span class="line">      </span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/vwrXng"><img src="https://s1.ax1x.com/2022/08/16/vwrXng.png" alt="vwrXng.png"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>神秘小屋</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签页</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>我的好朋友们</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime/runtime.js"/>
      <url>/js/runtime/runtime.js</url>
      
        <content type="html"><![CDATA[var now = new Date; function createtime() { var grt = new Date("08/10/2022 00:00:00"); now.setTime(now.getTime() + 250); var days = (now - grt) / 1e3 / 60 / 60 / 24, dnum = Math.floor(days), hours = (now - grt) / 1e3 / 60 / 60 - 24 * dnum, hnum = Math.floor(hours); 1 == String(hnum).length && (hnum = "0" + hnum); var minutes = (now - grt) / 1e3 / 60 - 1440 * dnum - 60 * hnum, mnum = Math.floor(minutes); 1 == String(mnum).length && (mnum = "0" + mnum); var seconds = (now - grt) / 1e3 - 86400 * dnum - 3600 * hnum - 60 * mnum, snum = Math.round(seconds); 1 == String(snum).length && (snum = "0" + snum); let currentTimeHtml = ""; currentTimeHtml = hnum < 18 && hnum >= 9 ? `<img class='boardsign' src='' title=''><span class='textTip'> <br> 本站居然运行了 ${dnum} 天</span><span id='runtime'> ${hnum} 小时 ${mnum} 分 ${snum} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>` : `<img class='boardsign' src='' title=''><span class='textTip'> <br> 本站居然运行了 ${dnum} 天</span><span id='runtime'> ${hnum} 小时 ${mnum} 分 ${snum} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>`, document.getElementById("workboard") && (document.getElementById("workboard").innerHTML = currentTimeHtml) } setInterval(() => { createtime() }, 250);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime/runtime.min.js"/>
      <url>/js/runtime/runtime.min.js</url>
      
        <content type="html"><![CDATA[var now=new Date;function createtime(){var grt=new Date("08/10/2022 00:00:00");now.setTime(now.getTime()+250);var days=(now-grt)/1e3/60/60/24,dnum=Math.floor(days),hours=(now-grt)/1e3/60/60-24*dnum,hnum=Math.floor(hours);1==String(hnum).length&&(hnum="0"+hnum);var minutes=(now-grt)/1e3/60-1440*dnum-60*hnum,mnum=Math.floor(minutes);1==String(mnum).length&&(mnum="0"+mnum);var seconds=(now-grt)/1e3-86400*dnum-3600*hnum-60*mnum,snum=Math.round(seconds);1==String(snum).length&&(snum="0"+snum);let currentTimeHtml="";currentTimeHtml=`<img class='boardsign' src='' title=''><span class='textTip'> <br> 本站居然运行了 ${dnum} 天</span><span id='runtime'> ${hnum} 小时 ${mnum} 分 ${snum} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>`,document.getElementById("workboard")&&(document.getElementById("workboard").innerHTML=currentTimeHtml)}setInterval(()=>{createtime()},250);]]></content>
      
    </entry>
    
    
  
</search>
